// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/sbtha.db"
}

model SecurityQuestions {
  id                     Int                     @id @default(autoincrement())
  question               String                  @unique
  usersSecurityQuestions UserSecurityQuestions[]
}

model User {
  id                    Int                     @id @default(autoincrement())
  username              String                  @unique
  password              String
  firstName             String
  middleName            String
  lastName              String
  role                  Role                    @relation(fields: [roleId], references: [id])
  roleId                Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?               @updatedAt
  deletedAt             DateTime?
  bookingsAsDriver      Booking[]               @relation(name: "DriverRelation")
  bookingsAsPassenger   Booking[]               @relation(name: "PassengerRelation")
  userSecurityQuestions UserSecurityQuestions[]
}

model UserSecurityQuestions {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  securityQuestion   SecurityQuestions @relation(fields: [securityQuestionId], references: [id])
  securityQuestionId Int

  @@id([userId, securityQuestionId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Dropoff {
  id        Int           @id @default(autoincrement())
  name      String
  address   String
  longitude String
  latitude  String
  fare      String
  status    DropOffStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  deletedAt DateTime?
  bookings  Booking[]
}

model Booking {
  id        Int     @id @default(autoincrement())
  dropoff   Dropoff @relation(fields: [dropoffId], references: [id])
  dropoffId Int

  driver   User? @relation(name: "DriverRelation", fields: [driverId], references: [id])
  driverId Int?

  passenger   User @relation(name: "PassengerRelation", fields: [passengerId], references: [id])
  passengerId Int

  status      BookingStatus
  pickupTime  DateTime?
  dropoffTime DateTime?
  createdAt   DateTime      @default(now())
}

enum DropOffStatus {
  ACTIVE
  DISABLED
}

enum BookingStatus {
  BOOKING // Waiting kung may mabbook
  ACCEPTED // Booking accepted and Driver is OTW (Cancellable)
  ONGOING // Passenger picked up
  COMPLETED // Passenger dropped off
  CANCELLED // Cancelled
}
